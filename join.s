.text
__join:
.globl __join
loop:
  add a5, a1, a2 #оставшееся количество незаполненных элементов в выходном массиве
  beq a5, zero, endloop #если это значение = 0, то мы заполнили выходной массив, необходимо выйти из цикла
  lw t0, 0(a3) #загружаем элемент из массива А
  lw t1, 0(a4) #загружаем элемент из массива В
  beq a1, zero, writefromB #если счетчик элементов массива А дошел до 0, записываем элемент из массива В
  beq a2, zero, writefromA #если счетчик элементов массива B дошел до 0, записываем элемент из массива A
  bgtu t0, t1, writefromB #если элемент из первого массива >=, чем из второго, то добавляем элемент из В
  writefromA:
  sw t0, 0(a0) #сохраняем в память в arrayC С[k] = A[i]
  addi a1, a1, -1 #уменьшаем счетчик элементов массива А
  addi a3, a3, 4 #переходим к след элементу массива А а3 = A[i+1]
  addi a0, a0, 4 #переходим к след ячейке, куда будем сохранять С[k+1]
  jal zero, loop #переходим в начало цикла
  writefromB:
  sw t1, 0(a0) #сохраняем в память в arrayC С[k] = B[j]
  addi a2, a2, -1 #уменьшаем счетчик элементов массива B
  addi a4, a4, 4 #переходим к след элементу массива B а4 = B[j+1]
  addi a0, a0, 4 #переходим к след ячейке, куда будем сохранять С[k+1]
  jal zero, loop #переходим в начало цикла
endloop:
ret #выход из подрограммы

